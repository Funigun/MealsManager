// <auto-generated />
using System;
using MealsManager.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealsManager.Persistance.Migrations
{
    [DbContext(typeof(MealsManagerDbContext))]
    [Migration("20241017192826_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookbookCategories", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CookbookId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "CookbookId");

                    b.HasIndex("CookbookId");

                    b.ToTable("CookbookCategories");
                });

            modelBuilder.Entity("CuisineIngredient", b =>
                {
                    b.Property<int>("CuisinesId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.HasKey("CuisinesId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("CuisineIngredient");
                });

            modelBuilder.Entity("IngredientCategoryIngredientCategory", b =>
                {
                    b.Property<int>("ParentCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoriesId")
                        .HasColumnType("int");

                    b.HasKey("ParentCategoriesId", "SubcategoriesId");

                    b.HasIndex("SubcategoriesId");

                    b.ToTable("IngredientCategoryIngredientCategory");
                });

            modelBuilder.Entity("IngredientIngredientCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("IngredientIngredientCategory");
                });

            modelBuilder.Entity("MealPlanRecipe", b =>
                {
                    b.Property<int>("MealPlansId")
                        .HasColumnType("int");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.HasKey("MealPlansId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("MealPlanRecipe");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Cookbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Cookbooks");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookbookCategoryChild", b =>
                {
                    b.Property<int>("CookbookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("CookbookId", "CategoryId", "ChildCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChildCategoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CookbookCategoryChildren", (string)null);
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookbookCategoryRecipe", b =>
                {
                    b.Property<int>("CookbookId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CookbookId", "RecipeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CookbookRecipes", (string)null);
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookingStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CookingStepTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CookingStepTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CookingSteps", (string)null);
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookingStepType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("CookingStepType");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.IngredientUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("IngredientUnits");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Pantry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Pantries");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.PantryCategoryChild", b =>
                {
                    b.Property<int>("PantryId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PantryId", "CategoryId", "ChildCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("PantryCategoryChildren", (string)null);
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.PantryCategoryIngredient", b =>
                {
                    b.Property<int>("PantryId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("PantryId", "IngredientCategoryId", "IngredientId", "IngredientUnitId");

                    b.HasIndex("IngredientCategoryId");

                    b.HasIndex("IngredientId")
                        .IsUnique();

                    b.HasIndex("IngredientUnitId");

                    b.ToTable("PantryCategoryIngredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<byte>("NumberOfServings")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.RecipeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RecipeCategories");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("RecipeId", "IngredientId", "IngredientUnitId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("IngredientUnitId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("PantryCategories", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PantryId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "PantryId");

                    b.HasIndex("PantryId");

                    b.ToTable("PantryCategories");
                });

            modelBuilder.Entity("RecipeCategoryRecipeCategory", b =>
                {
                    b.Property<int>("ParentCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoriesId")
                        .HasColumnType("int");

                    b.HasKey("ParentCategoriesId", "SubcategoriesId");

                    b.HasIndex("SubcategoriesId");

                    b.ToTable("RecipeCategoryRecipeCategory");
                });

            modelBuilder.Entity("RecipeRecipeCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeCategory");
                });

            modelBuilder.Entity("CookbookCategories", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Cookbook", null)
                        .WithMany()
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CuisineIngredient", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.Cuisine", null)
                        .WithMany()
                        .HasForeignKey("CuisinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientCategoryIngredientCategory", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientIngredientCategory", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealPlanRecipe", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.MealPlan", null)
                        .WithMany()
                        .HasForeignKey("MealPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookbookCategoryChild", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", "Category")
                        .WithMany("CookbookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", "ChildCategory")
                        .WithMany("CookbookCategoryChildren")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("CategoryChildren")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", null)
                        .WithMany("CookbookCategoryChildren")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Category");

                    b.Navigation("ChildCategory");

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookbookCategoryRecipe", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", "RecipeCategory")
                        .WithMany("CookbookCategoryRecipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MealsManager.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("CategoryRecipes")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", "Recipe")
                        .WithMany("CookbookCategoryRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cookbook");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeCategory");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookingStep", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.CookingStepType", "StepType")
                        .WithMany("Steps")
                        .HasForeignKey("CookingStepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", "Recipe")
                        .WithMany("CookingSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("StepType");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.PantryCategoryChild", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", "Category")
                        .WithMany("PantryCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", "ChildCategory")
                        .WithMany("PantryCategoryChildren")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Pantry", "Pantry")
                        .WithMany("CategoryChildren")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ChildCategory");

                    b.Navigation("Pantry");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.PantryCategoryIngredient", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", "IngredientCategory")
                        .WithMany("PantryCategoryIngredients")
                        .HasForeignKey("IngredientCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MealsManager.Domain.Entities.Ingredient", "Ingredient")
                        .WithOne("PantryCategory")
                        .HasForeignKey("MealsManager.Domain.Entities.PantryCategoryIngredient", "IngredientId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("MealsManager.Domain.Entities.IngredientUnit", "IngredientUnit")
                        .WithMany("PantryIngredients")
                        .HasForeignKey("IngredientUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Pantry", "Pantry")
                        .WithMany("CategoryIngredients")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientCategory");

                    b.Navigation("IngredientUnit");

                    b.Navigation("Pantry");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.Cuisine", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("Recipes")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Cuisine");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.IngredientUnit", "IngredientUnit")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientUnit");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryCategories", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.IngredientCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Pantry", null)
                        .WithMany()
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeCategoryRecipeCategory", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeRecipeCategory", b =>
                {
                    b.HasOne("MealsManager.Domain.Entities.RecipeCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealsManager.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Cookbook", b =>
                {
                    b.Navigation("CategoryChildren");

                    b.Navigation("CategoryRecipes");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.CookingStepType", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Cuisine", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("PantryCategory");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.IngredientCategory", b =>
                {
                    b.Navigation("PantryCategories");

                    b.Navigation("PantryCategoryChildren");

                    b.Navigation("PantryCategoryIngredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.IngredientUnit", b =>
                {
                    b.Navigation("PantryIngredients");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Pantry", b =>
                {
                    b.Navigation("CategoryChildren");

                    b.Navigation("CategoryIngredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("CookbookCategoryChildren");

                    b.Navigation("CookbookCategoryRecipes");

                    b.Navigation("CookingSteps");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("MealsManager.Domain.Entities.RecipeCategory", b =>
                {
                    b.Navigation("CookbookCategories");

                    b.Navigation("CookbookCategoryChildren");

                    b.Navigation("CookbookCategoryRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
